apiVersion: core.oam.dev/v1alpha1
kind: Definition
metadata:
  name: trigger-worker-default
  namespace: vela-system
spec:
  type: trigger-worker
  templates:
    main.cue: |
      // deployment will be renderd and applied to the cluster
      deployment: {
        apiVersion: "apps/v1"
        kind:       "Deployment"
        metadata: {
          name:      parameter.name
          namespace: triggerService.namespace
          labels: {
            "app.kubernetes.io/name": parameter.name
            "trigger.oam.dev/name":   triggerService.name
            if parameter.labels != _|_ {
              parameter.labels
            }
          }
          if parameter.annotations != _|_ {
            annotations: parameter.annotations
          }
        }
        spec: {
          selector: {
            matchLabels: {
              "app.kubernetes.io/name": parameter.name
              "trigger.oam.dev/name":   triggerService.name
            }
          }
          replicas: 1
          template: {
            metadata: {
              labels: {
                "app.kubernetes.io/name": parameter.name
                "trigger.oam.dev/name":   triggerService.name
                if parameter.labels != _|_ {
                  parameter.labels
                }
              }
              if parameter.annotations != _|_ {
                annotations: parameter.annotations
              }
            }
            spec: {
              securityContext: {
                runAsNonRoot: true
                seccompProfile: {
                  type: "RuntimeDefault"
                }
              }
              containers: [{
                workingDir: "/"
                args: [
                  "-c=/etc/kube-trigger",
                  "--log-level=debug",
                  "--max-retry=\(parameter.config.maxRetry)",
                  "--retry-delay=\(parameter.config.retryDelay)",
                  "--per-worker-qps=\(parameter.config.perWorkerQPS)",
                  "--queue-size=\(parameter.config.queueSize)",
                  "--timeout=\(parameter.config.timeout)",
                  "--workers=\(parameter.config.workers)",
                  "--log-level=\(parameter.config.logLevel)",
                  "--multi-cluster-config-type=\(parameter.config.multiClusterConfigType)",
                ]
                image: parameter.image
                name:  "kube-trigger"
                securityContext: {
                  allowPrivilegeEscalation: false
                  capabilities: {
                    drop: ["ALL"]
                  }
                }
                resources: {
                  limits: {
                    cpu:    parameter.resource.cpu.limits
                    memory: parameter.resource.memory.limits
                  }
                  requests: {
                    cpu:    parameter.resource.cpu.requests
                    memory: parameter.resource.memory.requests
                  }
                }
                volumeMounts: [{
                  mountPath: "/etc/kube-trigger"
                  name:      "config"
                }]
              }]
              serviceAccountName:            parameter.serviceAccount
              terminationGracePeriodSeconds: 10
              volumes: [{
                name: "config"
                configMap: {
                  name: triggerService.name
                }
              }]
              if parameter.imagePullSecrets != _|_ {
                imagePullSecrets: parameter.imagePullSecrets
              }
              if parameter.hostAliases != _|_ {
                hostAliases: parameter.hostAliases
              }
            }
          }
        }
      }

      if parameter.createService == true {
        service: {
          apiVersion: "v1"
          kind:       "Service"
          metadata: {
            name:      parameter.name
            namespace: triggerService.namespace
          }
          spec:{
              selector:{
                "app.kubernetes.io/name": parameter.name
                "trigger.oam.dev/name":   triggerService.name
              }
              ports:[{
                  for _,v in parameter.service.ports {
                    name: v.name
                    port: v.port
                    targetPort: v.targetPort
                  }
                }]
              type: parameter.service.type
          }
        }
      }
      
      triggerService: {
        name:      string
        namespace: *"vela-system" | string
      }

      parameter: {
        name: *triggerService.name | string
        labels?: [string]:      string
        annotations?: [string]: string
        image: *"oamdev/kube-trigger:latest" | string
        resource: {
          cpu: {
            requests: *"10m" | string
            limits:   *"500m" | string
          }
          memory: {
            requests: *"64Mi" | string
            limits:   *"128Mi" | string
          }
        }
        serviceAccount: *"kube-trigger" | string
        config: {
          maxRetry:               *5 | int
          retryDelay:             *2 | int
          perWorkerQPS:           *2 | int
          queueSize:              *50 | int
          timeout:                *10 | int
          workers:                *4 | int
          logLevel:               *"info" | "debug"
          multiClusterConfigType: *"cluster-gateway" | "cluster-gateway-secret"
        }
        imagePullSecrets?: [...{
          name: string
        }]
        hostAliases?: [...{
          ip?: string
          hostNames?: [...string]
        }]
        createService: *true | bool
        service: {
          ports: *[{
                  name: "default"
                  port: 80
                  targetPort: 80
                }] | [...{
                   name: string
                   port: int
                   targetPort: int
                }]
          type: *"ClusterIP" | "NodePort" | "LoadBalancer" | "ExternalName"
        }
      }
